{"version":3,"sources":["components/fist/fist.component.jsx","components/selection-list/selection-list.component.jsx","index.js"],"names":["Fist","props","className","choice","user","SelectionList","options","map","option","key","id","onClick","onClickHandle","reference","App","winOrLose","ai","winners","chooseSelection","e","setState","aiChoice","result","element","target","classList","add","userChoice","state","Math","floor","random","fists","document","getElementsByClassName","i","length","style","animation","addEventListener","remove","this","React","Component","ReactDOM","render","getElementById"],"mappings":"uSAIaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,aACX,4BAAKD,EAAME,QACX,2BAAkB,GAAdF,EAAMG,KAAe,MAAQ,eCH5BC,G,MAAgB,SAACJ,GAAD,OACzB,yBAAKC,UAAU,kBACVD,EAAMK,QAAQC,KAAI,SAAAC,GAAM,OACtB,wBAAIC,IAAKD,EAAQE,GAAIF,EAAQG,QAASV,EAAMW,eAA5C,IAA6DX,EAAMY,UAAUL,GAA7E,WCCLM,G,wDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAqBRc,UAAY,SAACX,EAAMY,GACjB,IAAMC,EAAU,CACd,KAAQ,WACR,MAAS,OACT,SAAY,SAGd,OAAIA,EAAQb,IAASY,EACX,WACCC,EAAQD,IAAOZ,EAChB,UAEA,cAlCO,EAuCnBc,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CACZjB,OAAQ,eACRkB,SAAU,eACVC,OAAQ,eAEV,IAAIC,EAAUJ,EAAEK,OAChBD,EAAQE,UAAUC,IAAI,UAItB,IAHA,IAAIC,EAAaJ,EAAQb,GACrBW,EAAW,EAAKO,MAAMtB,QAAQuB,KAAKC,MAAuB,EAAjBD,KAAKE,WAC9CC,EAAQC,SAASC,uBAAuB,aACnCC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAChCH,EAAMG,GAAGE,MAAMC,UAAY,cAI7BN,EAAM,GAAGO,iBAAiB,gBAAgB,WACxC,EAAKnB,SAAS,CACZjB,OAAQ,EAAKyB,MAAMf,UAAUc,GAC7BN,SAAU,EAAKO,MAAMf,UAAUQ,GAC/BC,OAAQ,EAAKP,UAAUY,EAAYN,KAIrCW,EAAM,GAAGK,MAAMC,UAAY,GAC3BN,EAAM,GAAGK,MAAMC,UAAY,GAE3Bf,EAAQE,UAAUe,OAAO,cA/D3B,EAAKZ,MAAQ,CACXzB,OAAQ,eACRkB,SAAU,eACVf,QAAS,CAAC,OAAQ,QAAS,YAC3BO,UAAW,CACT,KAAQ,eACR,MAAS,eACT,SAAY,UAEdS,OAAQ,IAZO,E,qDAyEjB,OACE,6BACE,sDACA,kBAAC,EAAD,CAAehB,QAASmC,KAAKb,MAAMtB,QAASO,UAAW4B,KAAKb,MAAMf,UAAWD,cAAe6B,KAAKvB,kBACjG,4BAA0B,IAArBuB,KAAKb,MAAMN,OAAemB,KAAKb,MAAMN,OAAS,sBACnD,kBAAC,EAAD,CAAMnB,OAAQsC,KAAKb,MAAMzB,OAAQC,MAAM,IACvC,kBAAC,EAAD,CAAMD,OAAQsC,KAAKb,MAAMP,SAAUjB,MAAM,S,GAhF/BsC,IAAMC,YAuFxBC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,W","file":"static/js/main.2cbbe2d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './fist.styles.css';\r\n\r\nexport const Fist = (props) => (\r\n    <div className='selection'>\r\n        <h1>{props.choice}</h1>\r\n        <p>{props.user == true ? 'You' : 'Opponent'}</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './selection-list.styles.css';\r\n\r\nexport const SelectionList = (props) => (\r\n    <div className='selection-list'>\r\n        {props.options.map(option =>(\r\n           <h1 key={option} id={option} onClick={props.onClickHandle}> {props.reference[option]} </h1> \r\n        ))}\r\n    </div>\r\n)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Fist } from './components/fist/fist.component';\r\nimport { SelectionList } from './components/selection-list/selection-list.component';\r\n\r\nimport './main.css';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      choice: '🤜',\r\n      aiChoice: '🤛',\r\n      options: ['rock', 'paper', 'scissors'],\r\n      reference: {\r\n        'rock': '👊',\r\n        'paper': '🖐',\r\n        'scissors': '✌'\r\n      },\r\n      result: ''\r\n    }\r\n  }\r\n\r\n\r\n    /*\r\n  This works by essentially using an index to look up your choice and see if your opponent's choice is the result, if it is, it means you won.\r\n  I then do the same using the AI's choice, if your choice is the result, you lose.\r\n  Otherwise, it's a draw!\r\n  */\r\n  winOrLose = (user, ai) => {\r\n    const winners = {\r\n      'rock': 'scissors',\r\n      'paper': 'rock',\r\n      'scissors': 'paper'\r\n    }\r\n  \r\n    if (winners[user] == ai) {\r\n      return (\"Victory!\");\r\n    } else if (winners[ai] == user) {\r\n      return (\"Defeat!\");\r\n    } else {\r\n      return (\"Stalemate!\");\r\n    }\r\n  }\r\n\r\n\r\n  chooseSelection = (e) => {\r\n    this.setState({\r\n      choice: '🤜',\r\n      aiChoice: '🤛',\r\n      result: 'Good luck!'\r\n    });\r\n    let element = e.target;\r\n    element.classList.add('active');\r\n    let userChoice = element.id;\r\n    let aiChoice = this.state.options[Math.floor(Math.random() * (3))];\r\n    let fists = document.getElementsByClassName('selection');\r\n    for (let i = 0; i < fists.length; i++) {\r\n      fists[i].style.animation = 'bump .75s 3';\r\n    }\r\n\r\n    // Wait until animation is finished to change state\r\n    fists[0].addEventListener('animationend', () => {\r\n      this.setState({\r\n        choice: this.state.reference[userChoice],\r\n        aiChoice: this.state.reference[aiChoice],\r\n        result: this.winOrLose(userChoice, aiChoice)\r\n      });\r\n\r\n      // Reset animation\r\n      fists[0].style.animation = '';\r\n      fists[1].style.animation = '';\r\n\r\n      element.classList.remove('active');\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Rock, Paper, Scissors!</h1>\r\n        <SelectionList options={this.state.options} reference={this.state.reference} onClickHandle={this.chooseSelection} />\r\n        <h2>{this.state.result != '' ? this.state.result : 'Choose Carefully..'}</h2>\r\n        <Fist choice={this.state.choice} user={true} />\r\n        <Fist choice={this.state.aiChoice} user={false} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}